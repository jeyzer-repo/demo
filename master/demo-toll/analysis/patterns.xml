<?xml version="1.0" encoding="UTF-8"?>

<profile name="Demo-toll" version="2.1">


		<!-- 
			Pattern rule appliance by priority :
			1 - stack_size_interest (1003)
			2 - exclude_thread_name (1002)
			3 - exclude (1001)
			4 - function  (6)
			5 - function_discovery  (5)
			6 - executor  (4)
			7 - executor_thread_name (3)
			8 - operation (2)
			9 - operation_discovery (1)
			Exclude, function, operation and executor patterns priorities can be overriden by pattern attribute.
	 	-->
		<patterns>
			<!-- In pattern attribute, use semicolon separator to declare multiple line patterns -->
			<functions>
				<!-- Toll demo -->
				<function pattern="CarDriver.arrivesAtTheToll"  name="Arrives at the toll"/>
				<function pattern="CarDriver.giveTicketAndWait"  name="Gives ticket and waits"/>
				<function pattern="CarDriver.prepareMoney"  name="Prepares money"/>
				<function pattern="CarDriver.giveMoneyAndWait"  name="Gives money and waits"/>				
				<function pattern="CarDriver.startsCar"  name="Starts car"/>
				
				<function pattern="TollWorker.processTicket"  name="Process ticket" />
				<function pattern="TollWorker.waitsForMoney"  name="Waits for money" />
				<function pattern="TollWorker.storesMoney"  name="Stores money" />
				<function pattern="TollWorker.waitsForDriverToLeave"  name="Waits for driver to leave" />
				<function pattern="TollWorker.pause"  name="Coffee break" />
				<function pattern="TollSupervisor.regulate"  name="Toll worker regulation" />
				
				<function pattern="TrafficGenerator.generateTraffic"  name="Generates traffic" />
			</functions>
			<operations>
				<!-- Operation patterns apply for the first 20 lines of the thread dump                	 -->
				<!-- Exception : patterns ending with '.' apply for the first 2 lines of the thread dump -->
				<!-- Toll demo -->
				<operation pattern="TollWorker.consumeMemory"  name="Consumes memory"/>
				<operation pattern="CarDriver.consumeCPU"  name="Consumes CPU"/>
			</operations>
			<executors>
				<!-- Executor patterns must be available within the 20 first lines of the thread dump -->
				<!-- Toll demo -->
				<executor pattern="TollWorker.run" name="Toll worker"/>
				<executor pattern="TollSupervisor.run" name="Toll supervisor"/>
				<executor pattern="TrafficGenerator.run" name="Traffic generator"/>
			</executors>
			<executor_thread_names>
				<!-- Executor pattern based on the thread name. Regular expression recommended -->
				<executor_thread_name pattern="Car #" name="Car"/>
				<!--executor_thread_name pattern_regex="regex" name="Thread type name"/-->
			</executor_thread_names>
			<excludes>
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<exclude pattern="ThreadPoolExecutor.getTask" name="RMI Scheduler, supervisor and traffic generator pending"/>
				<exclude pattern="Finalizer$FinalizerThread.run" name="Finalizer"/>
				<exclude pattern="Table.epilogue"  name="Epilogue" />
			</excludes>
			<exclude_thread_names>
				<!-- Exclude stack based on thread name. Regular expression based recommended -->
				<!-- If stack size is equal or below the limit (optional size attribute), thread stack is excluded -->
				<exclude_thread_name pattern_regex="RMI TCP.*" name="RMI thread"/>
				<exclude_thread_name pattern="JMX server connection timeout" name="RMI thread"/>
				<exclude_thread_name pattern="Reference Handler" name="Reference Handler"/>
			</exclude_thread_names>
		</patterns>

</profile>
